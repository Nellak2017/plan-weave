TaskEditor (Refactoring done by 12/25/2023, Full Task done by 12/30/2023)
  X Refactor Pagination to use Redux + services pattern + decouple handlers from view logic
  X Test Coverage and JSDocs for all things (some helpers are not covered)
  X Polish all components so Linter doesn't complain
  X Full Task Schema
  X Full Task Schema Tests
  X Fix Console Warnings (Next Head, Styled component stuff, etc)
  X Fix Lighthouse metrics, except performance
  X Add Schema prop for TaskRow so that it can handle the Full Task
  X Refactor TaskTable to have horizontal scroll if too large
  X Refactor the spacing of stuff to accomodate Full Task
  X Validate incoming local tasks with schema: validateTasks({ taskList: completedOnTopSorted(tasksFromRedux, tasks, start) })
  Full Task Components (and relevant 3rd parties like Calendar)
	Due Calendar Component
	Thread Input Dropdown Component
	Put Efficiency In there Too! (Column and Update every interval (half second))
  Remove unnecessary logic in all of code base
  Add docs to Github, and make front page very pretty
  Media Queries
  Fix Overnight bug on refresh (sets it to be 24 hours more when it shouldnt)
  Fix the going to homepage on refresh bug (App page)
  
  (optional) add sort icons and that feature
  (optional) add analytics support or research it
  (optional) CompletedTimestamp into an ISO String

TaskView (1 way binding of information. Read-only. Efficiency over time, Matrix, Linear, Calendar, ...more in the future)

   Discover 3rd parties to help with Efficiency over time Graph and Calendar (Linear and Matrix may be done by hand using Tables with scrolling as you already made)
   Make the Styled Components with respect to Service Pattern (mostly view only now)
   Test the services, helpers, and events
   Ensure component displays as expected, handle edge cases like missing data points

Settings (Very easy component to make, simplest)

   Discover what settings I will let the user handle
   Discover a nice layout for it (copying some other site if I have to)
   Make the components for it using Service Architecture
   Visually inspect it to ensure it works fine

ViewEditor (edit threads, graph view, scheduled. 2-way binding like TaskEditor)
  Discover how you will address task Scheduling, Periodicity, and all that
  Discover the 3rd party library that will help you with Graph View and Calendars
  Discover how to do Topological Sorting Algorithm and how To Represent Tasks in Graph
  Make the sub-components' view using atomic style with respect to services pattern
    ThreadsView Molecule (composed of other atoms)
    GraphView Molecule (composed of other atoms)
    ScheduleView Molecule (composed of other atoms)
  Test any helpers or events using TDD approach

--- Backend (Firebase for now)

Verify Authentication Logic is Robust in Firebase
Hook up Thunks to Backend Endpoints to update DB in Firebase
Store User Information in Firebase effectively and display it using Next best practices

Test the whole user flow in production by making an account, and doing the usual actions a user would do. 
Test the whole user flow adversarily by trying to break it. 

(optional) hook up analytics
(optional) make a page that lets users submit complaints

Fix any Lighthouse issues, make sure the site conforms to all best practices, make sure there is no console warnings, etc. Atleast 80/100 for all Lighthouse metrics on deployed site.

Make sure the deployed site works even on another device and browser

Tell my friends about it and let them play with it to see what they like and dislike.





