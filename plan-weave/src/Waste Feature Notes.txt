Waste Feature.

// Note: you need to add a feature where the completed tasks do not contribute to the eta if and only if they were initially completed
// Note: For each task that is completed, display the completedTimestamp instead of the eta. If you display eta, it will be stale. Eta is still needed if user clicks incomplete.

1. In a list of tasks, the first task that is incomplete will have a waste = time - eta.

- [ ] t1 : waste = time - eta
- [ ] t2 : 0
- [ ] t3 : 0
       ...

2. In a list of tasks, the complete tasks will initialize with their established waste values.

- [X] t0 : waste = input waste
- [ ] t1 : waste = time - eta // Start calculating Eta here
- [ ] t2 : 0
- [ ] t3 : 0
       ...

3. When a Task Goes from Incomplete to Completed, it will stop calculating waste values. The waste = completedTimestamp - eta, then ttc is altered.
	ttc is altered so that the future etas can be updated properly.

// completedTimestamp = time recorded at completion
- [X] t0 : waste = input waste // this was here initially
- [X] t1 : waste = completedTimestamp - eta, ttc = min(completedTimestamp - start, 0.01) 
- [X] t2 : eta += t1:waste, waste = completedTimestamp - eta, ttc = min(completedTimestamp - t1:completedTimestamp, 0.01)
- [  ] t3 : eta += t2:waste, waste = time - eta
- [  ] t4 : eta += t2:waste, waste = 0
- [  ] tn : eta += t2:waste, waste = 0


4. When a Task Goes from Completed to Incomplete, it will resume calculating waste values from where it left off. waste = time - eta


5. When a Task is re-ordered with a drag and drop operation, the same logic applies as above, but to a different ordering of tasks (apply same rules). 
For example, if you re-order the 3rd task to be the 2nd task and only the first task is completed, then the new 2nd task will inherit the old third tasks waste/ttc/other fields and vice versa.

----------- pseudo-code (Assuming Correct Eta and TTC coming in) (Only modifies Waste, and it modifies TTC in 1 place in 1 case)

export const calculateWaste = ({ start, taskList, time = new Date(), indexUpdated = -1 }) => {

// 1. In a list of tasks, the first task that is incomplete will have a waste = time - eta.
// 2. In a list of tasks, the complete tasks will initialize with their established waste values.
if (indexUpdated === -1) {
	const firstIncompleteIndex = taskList.findIndex(task => task.status !== TASK_STATUSES.COMPLETED)
	return taskList.map((task, index) => {
		if (index === firstIncompleteIndex) return {...task, waste: time - eta} // convert time, eta to compatible values
		return task
	}))
}

// 3. When a Task Goes from Incomplete to Completed, it will stop calculating waste values. The waste = time - eta, then ttc is altered.
if (indexUpdated >= 0){
	const updatedTask = {...taskList[indexUpdated], waste: time - eta, ttc: Math.max(millisToHours(time.getTime() - start.getTime()), 0.01), completedTimestamp: time.getTime()/1000} // use proper units to do the arithmetic
	return taskList.map((task, index) => {
		if (index === indexUpdated) return updatedTask
		return task
	})
}

// Cases Covered by above logic
// 4. When a Task Goes from Completed to Incomplete, it will resume calculating waste values from where it left off. waste = time - eta
// 5. When a Task is re-ordered with a drag and drop operation, the same logic applies as above, but to a different ordering of tasks (apply same rules). 

}

--------------------- Enumeration of All Cases, using Visual Data for support

1. The initial state of the tasks should have all tasks with proper calculated eta from the taskList view.
	1a. waste for each task is this: (Calculate waste for non-complete only)
		- if a task is complete already, then do not touch it
		- if the task is the first incomplete task then it will be time - eta // use the updated eta value, not the old one
		- otherwise it is 0
	1b. ttc for each task is this: (Do not alter ttc)
		- Do not touch it
	1c. eta for each task is this: (Calculate eta for non-complete only)
		- if a task is complete already, then do not touch it
		- otherwise, the task will have eta = acc + ttc , where acc starts at start or (last completedTasks' completedTimestamp) and goes up with each ttc value
	1d. completedTimestamp is this:
		- it is the same (don't touch it)

2. When a user completes a task, the waste, ttc, and eta are recalculated, and submitted to the redux store.
	2a. waste for each task is this:
		- if the task is complete and not the one to be updated, then do not touch it // previous completed tasks retain their proper task values
		- if the task is complete and the one to be updated, then waste = time - eta // use the old eta, not the new one
		- if the task is not complete and not the one to be updated
			- if it is the first one not complete, then waste = time - eta
			- otherwise it is 0

	2b. ttc for each task is this:
		- if the task is complete and not the one to be updated, then do not touch it // previous completed tasks retain their proper task values
		- if the task is complete and the one to be updated, then ttc = ttc // I AM NOT SURE IF I SHOULD ALTER TTC OR NOT, PLEASE DO AN ANALYSIS! I THINK I SHOULD THOUGH. 
		- if the task is not complete and not the one to be updated, ttc = ttc // Don't change ttc of not complete tasks

	2c. eta for each task is this:
		- if the task is complete then eta = completedTimestamp  // use the value that was computed using the initialize method
		- if the task is not complete and not the one to be updated
			- if it is the first one not complete, then eta = time + ttc
			- otherwise it is eta = acc + ttc , where you update the sum in the acc for each task (using reduce)
	2d. completedTimestamp is this:
		- it is time

	after all this, the task must be submitted to the redux store

3. When a user incompletes a task, the waste, ttc, and eta are recalculated, and submitted to the redux store.
	3a. waste for each task is this:
		- if the task is complete, then do not touch it // completed tasks retain their proper task values, because it is not being updated
		- if the task is not complete
			- if it is the first one not complete, then waste = time - eta
			- otherwise it is 0

	3b. ttc for each task is this:
		- if the task is complete, then do not touch it // completed tasks retain their proper task values, because it is not being updated
		- if the task is not complete and the one to be updated, then ttc = ttc // Do we revert the ttc to what it was before? If so, how? 
		- if the task is not complete and not the one to be updated
			- ttc = ttc (don't modify it)

	3c. eta for each task is this:
		- if the task is complete, then do not touch it // completed tasks retain their proper task values, because it is not being updated
		- if the task is not complete, then eta = acc + ttc , initial value for acc = last complete task eta // start incrementing eta based on last task eta (! Possible issue here !)

	3d. completedTimestamp is this:
		- it is the same (don't update it)

	after all this, the task must be submitted to the redux store

---- simplified enumeration of states


1. The initial state of the tasks should have all tasks with proper calculated eta from the taskList view.
	1a. waste for each task is this: (Calculate waste for non-complete only)
		- if the task is the first incomplete task then it will be time - eta // use the updated eta value, not the old one
		- otherwise if it is not complete it is 0
	1c. eta for each task is this: (Calculate eta for non-complete only) // calculate eta first for use in waste calculation
		- if a task is not complete, the task will have eta = acc + ttc , where acc starts at start or (last completedTasks' completedTimestamp) and goes up with each ttc value

2. When a user completes a task, the waste, ttc, and eta are recalculated, and submitted to the redux store.
	2a. waste for each task is this:
		- if the task is complete and the one to be updated, then waste = time - eta // use the old eta, not the new one
		- if the task is not complete and not the one to be updated
			- if it is the first one not complete, then waste = time - eta // use the new eta, not the old one
			- otherwise it is 0

	2c. eta for each task is this:
		- if the task is complete then eta = completedTimestamp  // use the value that was computed using the initialize method
		- if the task is not complete and not the one to be updated
			- if it is the first one not complete, then eta = time + ttc
			- otherwise it is eta = acc + ttc , where you update the sum in the acc for each task (using reduce)
	2d. completedTimestamp is this:
		- it is time

	after all this, the task must be submitted to the redux store

3. When a user incompletes a task, the waste, ttc, and eta are recalculated, and submitted to the redux store.
	Initialize(taskList)

	after all this, the task must be submitted to the redux store

---- simplest enumeration of states

1. Initialized Tasks.
	incomplete tasks: {...task, waste: firstIncomplete ? time - eta : 0, eta: acc + ttc, acc starts at start or prev completedTimestamp}
	completed tasks: {...task}

2. Completed Tasks.
	incomplete tasks: {...task, waste: firstIncomplete ? time - eta : 0, eta: acc + ttc, acc starts at start or prev completedTimestamp}
	completed tasks: {...task, waste: notUpdating ? time - eta : waste, eta: completedTimestamp to 'HH:mm'}

3. Other Tasks = Initialized Tasks.

---- Combinatorical way of listing all possible interactions (write test cases for each numbered case)

// TODO: write test cases for each of these possible states and state transisitions

// Initial state
1. User does nothing, x completed tasks are displayed, y incomplete tasks are displayed, all with proper calculated eta
2. User does nothing, 0 completed tasks are displayed, y incomplete tasks are displayed, all with proper calculated eta
3. User does nothing, x completed tasks are displayed, 0 incomplete tasks are displayed, all with proper calculated eta
	
// Actions in the component itself
4. User completes task, x+1 completed tasks are displayed, y-1 incomplete tasks are displayed, eta and waste and maybe ttc is calculated // is there distinction between initial and non-initial tasks?
5. User incompletes task, x-1 completed tasks are displayed, y+1 incomplete tasks are displayed, eta and waste and maybe ttc is calculated // is there distinction between initial and non-initial tasks?
6. User re-orders tasks, x completed tasks are displayed, y incomplete tasks are displayed, but in different order, eta and waste are calculated
7. User changes name of task, x completed tasks are displayed, y incomplete tasks are displayed, but with one with different name (eta and waste are not affected)
8. User changes ttc, x completed tasks are displayed, y incomplete tasks are displayed, but with one with different ttc and altered etas and waste values that are calculated
9. User deletes a task with the trash icon, (x + y) - 1 tasks are displayed, waste, ttc, eta are preserved. (Tasks before the deleted are unaffected, while tasks after must be re-calculated)

// Actions outside the component
10. User searches tasks, the tasks are filtered as usual without affecting anything
11. User changes start or end time or owl mode, the eta and waste values are re-calculated with the usual formulas
12. User creates new task, the default task is supplied as the first incomplete task (default sorting method), waste and eta are calculated.
13. User deletes multiple tasks, the same logic applies as to individual task deletion but generalized.
14. User changes sorting method, the completed tasks remain on top and incomplete on bottom but within those sub-list, they are sorted as usual. Completed tasks retain their waste, ttc, and eta. Incomplete tasks re-adjust as expected.
15. User refreshes page, the tasks loaded in will be what they were before refreshing. The tasks should be updating the store for waste, ttc only (eta is view changeable, but waste and ttc must be stored for analytics)


































