// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";

function isNullOrUndefined(val) {
  if (val == null) {
    return true;
  } else {
    return Caml_obj.notequal(val, val);
  }
}

function floatToStringNullable(num, fallbackOpt) {
  var fallback = fallbackOpt !== undefined ? fallbackOpt : "undefined or null";
  if (isNullOrUndefined(num)) {
    return fallback;
  } else {
    return num.toString();
  }
}

function hoursToSeconds(hours) {
  return hours * 60.0 * 60.0;
}

function hoursToMillis(hours) {
  return hours * 60000.0 * 60.0;
}

function millisToHours(milliseconds) {
  return milliseconds / 60000.0 / 60.0;
}

function add(start, hours) {
  return new Date(start.getTime() + hoursToMillis(hours));
}

function subtract(time, eta) {
  return millisToHours(time.getTime() - eta.getTime());
}

function dateToToday(start) {
  var now = new Date(Date.now());
  if (!(Caml_obj.lessequal(new Date(0.0), start) && Number.isFinite(start.valueOf()))) {
    return {
            TAG: "Error",
            _0: "Invalid input. Expected a Date for dateToToday function."
          };
  }
  var initOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate()).valueOf();
  var initOfStart = new Date(start.getFullYear(), start.getMonth(), start.getDate()).valueOf();
  return {
          TAG: "Ok",
          _0: new Date(initOfToday + (start.valueOf() - initOfStart))
        };
}

function calculateEfficiency(startTime, endTime, ttcHours) {
  var normalFormula = hoursToSeconds(ttcHours) / (endTime - startTime);
  var parametersString = "\nstartTime = " + floatToStringNullable(startTime, undefined) + "}\nendTime = " + floatToStringNullable(endTime, undefined) + "}\nttcHours = " + floatToStringNullable(ttcHours, undefined) + "}";
  var undefinedString = "Type Error. Expected (startTime, endTime, ttcHours := Not undefined)." + parametersString;
  var invalidTypeString = "Type Error. Expected (startTime, endTime, ttcHours := Float)." + parametersString;
  var parameterRangeString = "Invalid input parameter Range.";
  var beyondMaxDateString = parameterRangeString + " Expected (startTime, endTime := [0,max safe date (8.64e15)))." + parametersString;
  var belowZeroErrorString = parameterRangeString + " Expected (startTime, endTime := [0,max safe date (8.64e15)]), (ttcHours := (0,24])." + parametersString;
  var moreThanDayString = parameterRangeString + " Expected (endTime - startTime <= 86400), (ttcHours <= 24)." + parametersString;
  var startEqualsEndString = parameterRangeString + " Expected (startTime === endTime)." + parametersString;
  var unknownErrorString = "Unknown Error has occurred in calculateEfficiency function." + parametersString;
  var undefinedError = startTime === undefined || endTime === undefined || ttcHours === undefined;
  var invalidInputTypeError = !Number.isFinite(startTime) || !Number.isFinite(endTime) || !Number.isFinite(ttcHours);
  if (undefinedError) {
    return {
            TAG: "Error",
            _0: undefinedString
          };
  } else if (invalidInputTypeError) {
    return {
            TAG: "Error",
            _0: invalidTypeString
          };
  } else if (startTime < 0.0 || endTime < 0.0 || ttcHours <= 0.0) {
    return {
            TAG: "Error",
            _0: belowZeroErrorString
          };
  } else if (startTime > 8.64e15 || endTime > 8.64e15) {
    return {
            TAG: "Error",
            _0: beyondMaxDateString
          };
  } else if (endTime - startTime > 86400.0 || ttcHours > 24.0) {
    return {
            TAG: "Error",
            _0: moreThanDayString
          };
  } else if (startTime === endTime) {
    return {
            TAG: "Error",
            _0: startEqualsEndString
          };
  } else if (startTime < endTime) {
    return {
            TAG: "Ok",
            _0: normalFormula
          };
  } else if (startTime > endTime) {
    return {
            TAG: "Ok",
            _0: -1.0 / normalFormula
          };
  } else {
    return {
            TAG: "Error",
            _0: unknownErrorString
          };
  }
}

function validateTransformation(task, schema, customErrorMessage) {
  var customErrorProcessed = customErrorMessage !== undefined ? customErrorMessage : "";
  var str = JSON.stringify(task);
  var errorMessage = str !== undefined ? customErrorProcessed + " task : " + str : "Failed to stringify task for error message";
  if (schema.isValidSync(task, {
          strict: true
        })) {
    return {
            TAG: "Ok",
            _0: undefined
          };
  } else {
    return {
            TAG: "Error",
            _0: errorMessage
          };
  }
}

function isTimestampFromToday(today, timestamp, secondsFromStartOpt) {
  var secondsFromStart = secondsFromStartOpt !== undefined ? secondsFromStartOpt : 86400.0;
  var todayDate = new Date(today.valueOf());
  var initOfToday = new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate(), 0, 0, 0);
  var startOfTodaySeconds = initOfToday.valueOf() / 1000;
  if (startOfTodaySeconds <= timestamp) {
    return timestamp <= startOfTodaySeconds + secondsFromStart;
  } else {
    return false;
  }
}

export {
  isNullOrUndefined ,
  floatToStringNullable ,
  hoursToSeconds ,
  hoursToMillis ,
  millisToHours ,
  add ,
  subtract ,
  dateToToday ,
  calculateEfficiency ,
  validateTransformation ,
  isTimestampFromToday ,
}
/* No side effect */
