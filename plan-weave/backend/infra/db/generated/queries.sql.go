// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getTasksByUserID = `-- name: GetTasksByUserID :many
SELECT id, user_id, task, selected, ttc, live_time, due_date, efficiency, parent_thread, waste, eta, weight, status, live_time_stamp, last_complete_time, last_incomplete_time, is_live
FROM tasks
WHERE user_id = $1
LIMIT 1000
`

func (q *Queries) GetTasksByUserID(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Task,
			&i.Selected,
			&i.Ttc,
			&i.LiveTime,
			&i.DueDate,
			&i.Efficiency,
			&i.ParentThread,
			&i.Waste,
			&i.Eta,
			&i.Weight,
			&i.Status,
			&i.LiveTimeStamp,
			&i.LastCompleteTime,
			&i.LastIncompleteTime,
			&i.IsLive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
